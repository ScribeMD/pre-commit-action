name: Pre-commit Optimized for ScribeMD/pre-commit-hooks
author: Kurt von Laven
description: >
  Install pre-commit via asdf and Poetry; then run pre-commit hooks with extra
  optimizations for ScribeMD/pre-commit-hooks.
branding:
  icon: wind
  color: orange
inputs:
  bump:
    description: >
      If "true," run the Commitizen action on push to main to commit a version
      bump and tag a release if there are any release-worthy changes. Commitizen
      relies on tags in order to perform an incremental release, so you must pass
      fetch-depth: 0 to the official GitHub checkout action unless bump is
      "false."
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - name: Get operating system name and version.
      id: os
      run: echo "IMAGE=$ImageOS" >>"$GITHUB_OUTPUT"
      shell: bash
    - name: Get asdf versions of tools with first-class GitHub Actions support.
      id: tool-versions
      run: |
        file=()
        while IFS= read -r line; do
          array=($line)
          tool="${array[0]}"
          version="${array[1]}"
          case $tool in
            dotnet-core | nodejs | python | ruby)
              echo "$tool=$version" >>"$GITHUB_OUTPUT"
              ;;

            *)
              file+=("$line")
              ;;
          esac
        done <.tool-versions

        # Remove tools to be installed via actions/setup-* from .tool-versions.
        printf "%s\n" "${file[@]}" >.tool-versions
      shell: bash
    - name: Set up .NET SDK at version specified in .tool-versions.
      if: steps.tool-versions.outputs.dotnet-core != ''
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: ${{ steps.tool-versions.outputs.dotnet-core }}
    - name: Set up Node.js at version specified in .tool-versions.
      uses: actions/setup-node@v3.6.0
      with:
        node-version: ${{ steps.tool-versions.outputs.nodejs }}
    - name: Set up Python at version specified in .tool-versions.
      uses: actions/setup-python@v4.5.0
      with:
        python-version: ${{ steps.tool-versions.outputs.python }}
    - name: Set up Ruby at version specified in .tool-versions.
      if: steps.tool-versions.outputs.ruby != ''
      uses: ruby/setup-ruby@v1.144.0
      with:
        ruby-version: ${{ steps.tool-versions.outputs.ruby }}
    - name: Install asdf.
      uses: asdf-vm/actions/setup@v1.1.0
      with:
        asdf_branch: v0.11.2
    - name: Cache asdf and asdf-managed tools.
      uses: actions/cache@v3.2.6
      id: asdf-cache
      with:
        path: ${{ env.ASDF_DIR }}
        key: >
          asdf-v0.11.2-${{ steps.os.outputs.IMAGE }}-${{
            hashFiles('**/.tool-versions')
          }}
    - name: Install asdf-managed tools based on .tool-versions.
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      uses: asdf-vm/actions/install@v1.1.0
    - name: Restore .tool-versions.
      run: git restore .tool-versions
      shell: bash
    - name: Get Poetry cache directory.
      id: poetry-cache
      run: |
        poetry_cache="$(poetry config -- cache-dir)"
        echo "PATH=$poetry_cache" >>"$GITHUB_OUTPUT"
      shell: bash
    - name: Cache Poetry dependencies.
      uses: actions/cache@v3.2.6
      with:
        path: |
          ${{ steps.poetry-cache.outputs.PATH }}
          .venv
        key: >
          poetry-${{ steps.os.outputs.IMAGE }}-python${{
            steps.tool-versions.outputs.python
          }}-${{
            hashFiles('poetry.toml', '**/poetry.lock')
          }}
        restore-keys: |
          poetry-${{ steps.os.outputs.IMAGE }}-python${{ steps.tool-versions.outputs.python }}-
    - name: Configure Poetry to use Python version specified in .tool-versions.
      run: poetry env use "${{ steps.tool-versions.outputs.python }}"
      shell: bash
    - name: Install Poetry dependencies.
      run: poetry install --sync
      shell: bash
    - name: Get npm cache directory.
      id: npm-cache
      run: |
        npm_cache="$(npm config get cache)"
        echo "PATH=$npm_cache" >>"$GITHUB_OUTPUT"
      shell: bash
    - name: Cache npm dependencies.
      uses: actions/cache@v3.2.6
      with:
        path: ${{ steps.npm-cache.outputs.PATH }}
        key: >
          node-${{ steps.os.outputs.IMAGE }}-${{ hashFiles(
            '.mega-linter.yaml',
            '.pre-commit-config.yaml',
            '.pre-commit-hooks.yaml'
          ) }}
    - name: Use Docker in rootless mode.
      uses: ScribeMD/rootless-docker@0.2.2
    - name: Determine name of MegaLinter Docker image from pre-commit config.
      id: megalinter
      run: |
        from os import environ
        from re import compile

        _MEGALINTER_ARGS_PATTERN = compile(
            "args:\\s*&megalinter-args\\s*\\[--flavor,\\s*(?P<flavor>\\w+),"
            "\\s*--release,\\s*(?P<release>v(\\d+\\.){2}\\d+)"
        )
        with open(".pre-commit-config.yaml", encoding="utf-8") as input_stream:
            for line in input_stream:
                if match := _MEGALINTER_ARGS_PATTERN.search(line):
                    break

        flavor = match.group("flavor")
        release = match.group("release")
        docker_image = f"megalinter-{flavor}:{release}"
        output_file = environ["GITHUB_OUTPUT"]
        with open(output_file, "a", encoding="utf-8") as output_stream:
            output_stream.write(f"DOCKER_IMAGE={docker_image}\n")
      shell: python
    - name: Cache Docker images.
      uses: ScribeMD/docker-cache@0.2.9
      with:
        key: ${{ steps.megalinter.outputs.DOCKER_IMAGE }}
    - name: Cache pre-commit hooks.
      uses: actions/cache@v3.2.6
      with:
        path: ~/.cache/pre-commit
        key: >
          pre-commit-${{ steps.os.outputs.IMAGE }}-${{ hashFiles(
            '**/.tool-versions',
            '**/poetry.lock',
            '.pre-commit-config.yaml'
          ) }}
        restore-keys: pre-commit-${{ steps.os.outputs.IMAGE }}-
    - name: Run pre-push hooks.
      run: |
        git remote set-head origin --auto # for commitizen-branch hook

        if [[ $GITHUB_REF_NAME == 'main' ]]; then
          export SKIP=asdf-install,commitizen-branch,no-commit-to-branch
        else
          export SKIP=asdf-install
        fi
        poetry run pre-commit gc # Avoid partial cache restoration snowballing.
        poetry run pre-commit run \
          --all-files --hook-stage push --show-diff-on-failure --color always
        poetry run pre-commit uninstall # Don't break subsequent Git commands.
      shell: bash
    - name: Push a commit to main to bump version and update changelog.
      if: >
        inputs.bump == 'true'
        && github.event_name == 'push' && github.ref == 'refs/heads/main'
        && !startsWith(github.event.head_commit.message, 'bump:')
      uses: commitizen-tools/commitizen-action@0.18.0
      with:
        git_name: commitizen-github-action[bot]
        git_email: commitizen-github-action[bot]@users.noreply.github.com
        github_token: ${{ github.token }}
        commitizen_version: 2.42.1 # Keep in sync with .pre-commit-config.yaml and pyproject.toml.
        check_consistency: true
