name: Pre-commit Optimized for ScribeMD/pre-commit-hooks
author: Kurt von Laven
description: >
  Install pre-commit via asdf and Poetry; then run pre-commit hooks with extra
  optimizations for ScribeMD/pre-commit-hooks.
branding:
  icon: wind
  color: orange
inputs:
  bump:
    description: >
      If "true," run the Commitizen action on push to main to commit a version
      bump and tag a release if there are any release-worthy changes. Commitizen
      relies on tags in order to preform an incremental release, so you must pass
      fetch-depth: 0 to the official GitHub checkout action unless bump is
      "false."
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - name: Install asdf.
      uses: asdf-vm/actions/setup@v1.1.0
      with:
        asdf_branch: v0.10.0
    - name: Cache asdf and asdf-managed tools.
      uses: actions/cache@v3.0.2
      id: asdf-cache
      with:
        path: ${{ env.ASDF_DIR }}
        key: asdf-v0.10.0-${{ runner.os }}-${{ hashFiles('**/.tool-versions') }}
    - name: Install asdf-managed tools based on .tool-versions.
      if: steps.asdf-cache.outputs.cache-hit != 'true'
      uses: asdf-vm/actions/install@v1.1.0
    - name: Add Poetry and its dependencies to PATH.
      run: |
        for version in "$ASDF_DIR/installs/poetry/"*; do
          echo "$version/bin" >>"$GITHUB_PATH"
        done
        echo "${{ github.workspace }}/.venv/bin" >>"$GITHUB_PATH"
      shell: bash
    - name: Cache Poetry dependencies.
      uses: actions/cache@v3.0.2
      with:
        path: .venv
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install Poetry dependencies.
      run: poetry install
      shell: bash
    - name: Get npm cache directory.
      id: npm-cache
      run: |
        npm_cache="$(npm config get cache)"
        echo "::set-output name=path::$npm_cache"
      shell: bash
    - name: Cache npm dependencies.
      uses: actions/cache@v3.0.2
      with:
        path: ${{ steps.npm-cache.outputs.path }}
        key: >
          node-${{ runner.os }}-${{ hashFiles(
            '.mega-linter.yaml',
            '.pre-commit-config.yaml',
            '.pre-commit-hooks.yaml'
          ) }}
    - name: Use Docker in rootless mode.
      uses: ScribeMD/rootless-docker@0.1.2
    - name: Cache Docker images.
      uses: ScribeMD/docker-cache@0.1.2
      with:
        key: docker-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Run pre-push hooks.
      uses: pre-commit/action@v2.0.3
      with:
        extra_args: "--all-files --hook-stage push"
      env:
        SKIP: no-commit-to-branch
    - name: Uninstall pre-commit hooks. # Don't break subsequent Git commands.
      run: pre-commit uninstall
      shell: bash
    - name: Push a commit to main to bump version and update changelog.
      if: >
        inputs.bump == 'true'
        && github.event_name == 'push' && github.ref == 'refs/heads/main'
        && !startsWith(github.event.head_commit.message, 'bump:')
      uses: commitizen-tools/commitizen-action@0.13.2
      with:
        git_name: commitizen-github-action[bot]
        git_email: commitizen-github-action[bot]@users.noreply.github.com
        github_token: ${{ github.token }}
        commitizen_version: 2.27.0 # Keep in sync with .pre-commit-config.yaml and pyproject.toml.
